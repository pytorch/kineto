/*---------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 *--------------------------------------------------------------------------------------------*/

// tslint:disable
/**
 * Pytorch profile API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 *
 *
 * NOTE: This file is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the file manually.
 */

import * as url from 'url'
import * as portableFetch from 'portable-fetch'
import { Configuration } from './configuration'

const BASE_PATH = '/data/plugin/torch_profiler'.replace(/\/+$/, '')

/**
 *
 * @export
 */
export const COLLECTION_FORMATS = {
  csv: ',',
  ssv: ' ',
  tsv: '\t',
  pipes: '|'
}

/**
 *
 * @export
 * @interface FetchAPI
 */
export interface FetchAPI {
  (url: string, init?: any): Promise<Response>
}

/**
 *
 * @export
 * @interface FetchArgs
 */
export interface FetchArgs {
  url: string
  options: any
}

/**
 *
 * @export
 * @class BaseAPI
 */
export class BaseAPI {
  protected configuration: Configuration

  constructor(
    configuration?: Configuration,
    protected basePath: string = BASE_PATH,
    protected fetch: FetchAPI = portableFetch
  ) {
    if (configuration) {
      this.configuration = configuration
      this.basePath = configuration.basePath || this.basePath
    }
  }
}

/**
 *
 * @export
 * @class RequiredError
 * @extends {Error}
 */
export class RequiredError extends Error {
  name: 'RequiredError'
  constructor(public field: string, msg?: string) {
    super(msg)
  }
}

/**
 *
 * @export
 * @interface Environment
 */
export interface Environment {
  /**
   *
   * @type {string}
   * @memberof Environment
   */
  title: string
  /**
   *
   * @type {string}
   * @memberof Environment
   */
  value: string
}
/**
 *
 * @export
 * @interface Graph
 */
export interface Graph {
  /**
   *
   * @type {string}
   * @memberof Graph
   */
  title?: string
  /**
   *
   * @type {Array<GraphColumn>}
   * @memberof Graph
   */
  columns: Array<GraphColumn>
  /**
   *
   * @type {Array<Array<string | number | boolean | ValueAndFormat>>}
   * @memberof Graph
   */
  rows: Array<Array<string | number | boolean | ValueAndFormat>>
}
/**
 *
 * @export
 * @interface GraphColumn
 */
export interface GraphColumn {
  /**
   *
   * @type {string}
   * @memberof GraphColumn
   */
  type: string
  /**
   *
   * @type {string}
   * @memberof GraphColumn
   */
  name: string
  /**
   *
   * @type {string}
   * @memberof GraphColumn
   */
  role?: string
  /**
   *
   * @type {GraphColumnP}
   * @memberof GraphColumn
   */
  p?: GraphColumnP
}
/**
 *
 * @export
 * @interface GraphColumnP
 */
export interface GraphColumnP {
  /**
   *
   * @type {boolean}
   * @memberof GraphColumnP
   */
  html?: boolean
}
/**
 *
 * @export
 * @interface KernelGraph
 */
export interface KernelGraph {
  /**
   *
   * @type {Graph}
   * @memberof KernelGraph
   */
  total: Graph
}
/**
 *
 * @export
 * @interface OperatorGraph
 */
export interface OperatorGraph {
  /**
   *
   * @type {Graph}
   * @memberof OperatorGraph
   */
  deviceTotalTime?: Graph
  /**
   *
   * @type {Graph}
   * @memberof OperatorGraph
   */
  deviceSelfTime: Graph
  /**
   *
   * @type {Graph}
   * @memberof OperatorGraph
   */
  hostTotalTime: Graph
  /**
   *
   * @type {Graph}
   * @memberof OperatorGraph
   */
  hostSelfTime: Graph
}
/**
 *
 * @export
 * @interface Overview
 */
export interface Overview {
  /**
   *
   * @type {Array<Performance>}
   * @memberof Overview
   */
  performance: Array<Performance>
  /**
   *
   * @type {Array<Environment>}
   * @memberof Overview
   */
  environments: Array<Environment>
  /**
   *
   * @type {Graph}
   * @memberof Overview
   */
  steps: Graph
  /**
   *
   * @type {string}
   * @memberof Overview
   */
  recommendations: string
}
/**
 *
 * @export
 * @interface Performance
 */
export interface Performance {
  /**
   *
   * @type {string}
   * @memberof Performance
   */
  name: string
  /**
   *
   * @type {string}
   * @memberof Performance
   */
  description?: string
  /**
   *
   * @type {string}
   * @memberof Performance
   */
  value?: string
  /**
   *
   * @type {string}
   * @memberof Performance
   */
  extra?: string
  /**
   *
   * @type {Array<Performance>}
   * @memberof Performance
   */
  children?: Array<Performance>
}
/**
 *
 * @export
 * @interface TableData
 */
export interface TableData {
  /**
   *
   * @type {Graph}
   * @memberof TableData
   */
  data: Graph
}
/**
 *
 * @export
 * @interface ValueAndFormat
 */
export interface ValueAndFormat {
  /**
   *
   * @type {string | number | boolean}
   * @memberof ValueAndFormat
   */
  v: string | number | boolean
  /**
   *
   * @type {string}
   * @memberof ValueAndFormat
   */
  f: string
}
/**
 * DefaultApi - fetch parameter creator
 * @export
 */
export const DefaultApiFetchParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     *
     * @param {string} run
     * @param {string} worker
     * @param {string} view
     * @param {string} groupBy Group By
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    kernelGet(
      run: string,
      worker: string,
      view: string,
      groupBy: string,
      options: any = {}
    ): FetchArgs {
      // verify required parameter 'run' is not null or undefined
      if (run === null || run === undefined) {
        throw new RequiredError(
          'run',
          'Required parameter run was null or undefined when calling kernelGet.'
        )
      }
      // verify required parameter 'worker' is not null or undefined
      if (worker === null || worker === undefined) {
        throw new RequiredError(
          'worker',
          'Required parameter worker was null or undefined when calling kernelGet.'
        )
      }
      // verify required parameter 'view' is not null or undefined
      if (view === null || view === undefined) {
        throw new RequiredError(
          'view',
          'Required parameter view was null or undefined when calling kernelGet.'
        )
      }
      // verify required parameter 'groupBy' is not null or undefined
      if (groupBy === null || groupBy === undefined) {
        throw new RequiredError(
          'groupBy',
          'Required parameter groupBy was null or undefined when calling kernelGet.'
        )
      }
      const localVarPath = `/kernel`
      const localVarUrlObj = url.parse(localVarPath, true)
      const localVarRequestOptions = Object.assign({ method: 'GET' }, options)
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (run !== undefined) {
        localVarQueryParameter['run'] = run
      }

      if (worker !== undefined) {
        localVarQueryParameter['worker'] = worker
      }

      if (view !== undefined) {
        localVarQueryParameter['view'] = view
      }

      if (groupBy !== undefined) {
        localVarQueryParameter['group_by'] = groupBy
      }

      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query
      )
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers
      )

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions
      }
    },
    /**
     *
     * @param {string} run
     * @param {string} worker
     * @param {string} view
     * @param {string} [groupBy] Group By
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    kernelTableGet(
      run: string,
      worker: string,
      view: string,
      groupBy?: string,
      options: any = {}
    ): FetchArgs {
      // verify required parameter 'run' is not null or undefined
      if (run === null || run === undefined) {
        throw new RequiredError(
          'run',
          'Required parameter run was null or undefined when calling kernelTableGet.'
        )
      }
      // verify required parameter 'worker' is not null or undefined
      if (worker === null || worker === undefined) {
        throw new RequiredError(
          'worker',
          'Required parameter worker was null or undefined when calling kernelTableGet.'
        )
      }
      // verify required parameter 'view' is not null or undefined
      if (view === null || view === undefined) {
        throw new RequiredError(
          'view',
          'Required parameter view was null or undefined when calling kernelTableGet.'
        )
      }
      const localVarPath = `/kernel/table`
      const localVarUrlObj = url.parse(localVarPath, true)
      const localVarRequestOptions = Object.assign({ method: 'GET' }, options)
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (run !== undefined) {
        localVarQueryParameter['run'] = run
      }

      if (worker !== undefined) {
        localVarQueryParameter['worker'] = worker
      }

      if (view !== undefined) {
        localVarQueryParameter['view'] = view
      }

      if (groupBy !== undefined) {
        localVarQueryParameter['group_by'] = groupBy
      }

      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query
      )
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers
      )

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions
      }
    },
    /**
     *
     * @param {string} run
     * @param {string} worker
     * @param {string} view
     * @param {string} groupBy Group By
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    operationGet(
      run: string,
      worker: string,
      view: string,
      groupBy: string,
      options: any = {}
    ): FetchArgs {
      // verify required parameter 'run' is not null or undefined
      if (run === null || run === undefined) {
        throw new RequiredError(
          'run',
          'Required parameter run was null or undefined when calling operationGet.'
        )
      }
      // verify required parameter 'worker' is not null or undefined
      if (worker === null || worker === undefined) {
        throw new RequiredError(
          'worker',
          'Required parameter worker was null or undefined when calling operationGet.'
        )
      }
      // verify required parameter 'view' is not null or undefined
      if (view === null || view === undefined) {
        throw new RequiredError(
          'view',
          'Required parameter view was null or undefined when calling operationGet.'
        )
      }
      // verify required parameter 'groupBy' is not null or undefined
      if (groupBy === null || groupBy === undefined) {
        throw new RequiredError(
          'groupBy',
          'Required parameter groupBy was null or undefined when calling operationGet.'
        )
      }
      const localVarPath = `/operation`
      const localVarUrlObj = url.parse(localVarPath, true)
      const localVarRequestOptions = Object.assign({ method: 'GET' }, options)
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (run !== undefined) {
        localVarQueryParameter['run'] = run
      }

      if (worker !== undefined) {
        localVarQueryParameter['worker'] = worker
      }

      if (view !== undefined) {
        localVarQueryParameter['view'] = view
      }

      if (groupBy !== undefined) {
        localVarQueryParameter['group_by'] = groupBy
      }

      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query
      )
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers
      )

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions
      }
    },
    /**
     *
     * @param {string} run
     * @param {string} worker
     * @param {string} view
     * @param {string} groupBy Group By
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    operationTableGet(
      run: string,
      worker: string,
      view: string,
      groupBy: string,
      options: any = {}
    ): FetchArgs {
      // verify required parameter 'run' is not null or undefined
      if (run === null || run === undefined) {
        throw new RequiredError(
          'run',
          'Required parameter run was null or undefined when calling operationTableGet.'
        )
      }
      // verify required parameter 'worker' is not null or undefined
      if (worker === null || worker === undefined) {
        throw new RequiredError(
          'worker',
          'Required parameter worker was null or undefined when calling operationTableGet.'
        )
      }
      // verify required parameter 'view' is not null or undefined
      if (view === null || view === undefined) {
        throw new RequiredError(
          'view',
          'Required parameter view was null or undefined when calling operationTableGet.'
        )
      }
      // verify required parameter 'groupBy' is not null or undefined
      if (groupBy === null || groupBy === undefined) {
        throw new RequiredError(
          'groupBy',
          'Required parameter groupBy was null or undefined when calling operationTableGet.'
        )
      }
      const localVarPath = `/operation/table`
      const localVarUrlObj = url.parse(localVarPath, true)
      const localVarRequestOptions = Object.assign({ method: 'GET' }, options)
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (run !== undefined) {
        localVarQueryParameter['run'] = run
      }

      if (worker !== undefined) {
        localVarQueryParameter['worker'] = worker
      }

      if (view !== undefined) {
        localVarQueryParameter['view'] = view
      }

      if (groupBy !== undefined) {
        localVarQueryParameter['group_by'] = groupBy
      }

      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query
      )
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers
      )

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions
      }
    },
    /**
     *
     * @param {string} run
     * @param {string} worker
     * @param {string} view
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    overviewGet(
      run: string,
      worker: string,
      view: string,
      options: any = {}
    ): FetchArgs {
      // verify required parameter 'run' is not null or undefined
      if (run === null || run === undefined) {
        throw new RequiredError(
          'run',
          'Required parameter run was null or undefined when calling overviewGet.'
        )
      }
      // verify required parameter 'worker' is not null or undefined
      if (worker === null || worker === undefined) {
        throw new RequiredError(
          'worker',
          'Required parameter worker was null or undefined when calling overviewGet.'
        )
      }
      // verify required parameter 'view' is not null or undefined
      if (view === null || view === undefined) {
        throw new RequiredError(
          'view',
          'Required parameter view was null or undefined when calling overviewGet.'
        )
      }
      const localVarPath = `/overview`
      const localVarUrlObj = url.parse(localVarPath, true)
      const localVarRequestOptions = Object.assign({ method: 'GET' }, options)
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (run !== undefined) {
        localVarQueryParameter['run'] = run
      }

      if (worker !== undefined) {
        localVarQueryParameter['worker'] = worker
      }

      if (view !== undefined) {
        localVarQueryParameter['view'] = view
      }

      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query
      )
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers
      )

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions
      }
    },
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    runsGet(options: any = {}): FetchArgs {
      const localVarPath = `/runs`
      const localVarUrlObj = url.parse(localVarPath, true)
      const localVarRequestOptions = Object.assign({ method: 'GET' }, options)
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query
      )
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers
      )

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions
      }
    },
    /**
     *
     * @param {string} run
     * @param {string} worker
     * @param {string} view
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    traceGet(
      run: string,
      worker: string,
      view: string,
      options: any = {}
    ): FetchArgs {
      // verify required parameter 'run' is not null or undefined
      if (run === null || run === undefined) {
        throw new RequiredError(
          'run',
          'Required parameter run was null or undefined when calling traceGet.'
        )
      }
      // verify required parameter 'worker' is not null or undefined
      if (worker === null || worker === undefined) {
        throw new RequiredError(
          'worker',
          'Required parameter worker was null or undefined when calling traceGet.'
        )
      }
      // verify required parameter 'view' is not null or undefined
      if (view === null || view === undefined) {
        throw new RequiredError(
          'view',
          'Required parameter view was null or undefined when calling traceGet.'
        )
      }
      const localVarPath = `/trace`
      const localVarUrlObj = url.parse(localVarPath, true)
      const localVarRequestOptions = Object.assign({ method: 'GET' }, options)
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (run !== undefined) {
        localVarQueryParameter['run'] = run
      }

      if (worker !== undefined) {
        localVarQueryParameter['worker'] = worker
      }

      if (view !== undefined) {
        localVarQueryParameter['view'] = view
      }

      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query
      )
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers
      )

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions
      }
    },
    /**
     *
     * @param {string} run
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    viewsGet(run: string, options: any = {}): FetchArgs {
      // verify required parameter 'run' is not null or undefined
      if (run === null || run === undefined) {
        throw new RequiredError(
          'run',
          'Required parameter run was null or undefined when calling viewsGet.'
        )
      }
      const localVarPath = `/views`
      const localVarUrlObj = url.parse(localVarPath, true)
      const localVarRequestOptions = Object.assign({ method: 'GET' }, options)
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (run !== undefined) {
        localVarQueryParameter['run'] = run
      }

      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query
      )
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers
      )

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions
      }
    },
    /**
     *
     * @param {string} run
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    workersGet(run: string, options: any = {}): FetchArgs {
      // verify required parameter 'run' is not null or undefined
      if (run === null || run === undefined) {
        throw new RequiredError(
          'run',
          'Required parameter run was null or undefined when calling workersGet.'
        )
      }
      const localVarPath = `/workers`
      const localVarUrlObj = url.parse(localVarPath, true)
      const localVarRequestOptions = Object.assign({ method: 'GET' }, options)
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (run !== undefined) {
        localVarQueryParameter['run'] = run
      }

      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query
      )
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers
      )

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions
      }
    }
  }
}

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function (configuration?: Configuration) {
  return {
    /**
     *
     * @param {string} run
     * @param {string} worker
     * @param {string} view
     * @param {string} groupBy Group By
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    kernelGet(
      run: string,
      worker: string,
      view: string,
      groupBy: string,
      options?: any
    ): (fetch?: FetchAPI, basePath?: string) => Promise<KernelGraph> {
      const localVarFetchArgs = DefaultApiFetchParamCreator(
        configuration
      ).kernelGet(run, worker, view, groupBy, options)
      return (
        fetch: FetchAPI = portableFetch,
        basePath: string = BASE_PATH
      ) => {
        return fetch(
          basePath + localVarFetchArgs.url,
          localVarFetchArgs.options
        ).then((response) => {
          if (response.status >= 200 && response.status < 300) {
            return response.json()
          } else {
            throw response
          }
        })
      }
    },
    /**
     *
     * @param {string} run
     * @param {string} worker
     * @param {string} view
     * @param {string} [groupBy] Group By
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    kernelTableGet(
      run: string,
      worker: string,
      view: string,
      groupBy?: string,
      options?: any
    ): (fetch?: FetchAPI, basePath?: string) => Promise<TableData> {
      const localVarFetchArgs = DefaultApiFetchParamCreator(
        configuration
      ).kernelTableGet(run, worker, view, groupBy, options)
      return (
        fetch: FetchAPI = portableFetch,
        basePath: string = BASE_PATH
      ) => {
        return fetch(
          basePath + localVarFetchArgs.url,
          localVarFetchArgs.options
        ).then((response) => {
          if (response.status >= 200 && response.status < 300) {
            return response.json()
          } else {
            throw response
          }
        })
      }
    },
    /**
     *
     * @param {string} run
     * @param {string} worker
     * @param {string} view
     * @param {string} groupBy Group By
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    operationGet(
      run: string,
      worker: string,
      view: string,
      groupBy: string,
      options?: any
    ): (fetch?: FetchAPI, basePath?: string) => Promise<OperatorGraph> {
      const localVarFetchArgs = DefaultApiFetchParamCreator(
        configuration
      ).operationGet(run, worker, view, groupBy, options)
      return (
        fetch: FetchAPI = portableFetch,
        basePath: string = BASE_PATH
      ) => {
        return fetch(
          basePath + localVarFetchArgs.url,
          localVarFetchArgs.options
        ).then((response) => {
          if (response.status >= 200 && response.status < 300) {
            return response.json()
          } else {
            throw response
          }
        })
      }
    },
    /**
     *
     * @param {string} run
     * @param {string} worker
     * @param {string} view
     * @param {string} groupBy Group By
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    operationTableGet(
      run: string,
      worker: string,
      view: string,
      groupBy: string,
      options?: any
    ): (fetch?: FetchAPI, basePath?: string) => Promise<TableData> {
      const localVarFetchArgs = DefaultApiFetchParamCreator(
        configuration
      ).operationTableGet(run, worker, view, groupBy, options)
      return (
        fetch: FetchAPI = portableFetch,
        basePath: string = BASE_PATH
      ) => {
        return fetch(
          basePath + localVarFetchArgs.url,
          localVarFetchArgs.options
        ).then((response) => {
          if (response.status >= 200 && response.status < 300) {
            return response.json()
          } else {
            throw response
          }
        })
      }
    },
    /**
     *
     * @param {string} run
     * @param {string} worker
     * @param {string} view
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    overviewGet(
      run: string,
      worker: string,
      view: string,
      options?: any
    ): (fetch?: FetchAPI, basePath?: string) => Promise<Overview> {
      const localVarFetchArgs = DefaultApiFetchParamCreator(
        configuration
      ).overviewGet(run, worker, view, options)
      return (
        fetch: FetchAPI = portableFetch,
        basePath: string = BASE_PATH
      ) => {
        return fetch(
          basePath + localVarFetchArgs.url,
          localVarFetchArgs.options
        ).then((response) => {
          if (response.status >= 200 && response.status < 300) {
            return response.json()
          } else {
            throw response
          }
        })
      }
    },
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    runsGet(
      options?: any
    ): (fetch?: FetchAPI, basePath?: string) => Promise<Array<string>> {
      const localVarFetchArgs = DefaultApiFetchParamCreator(
        configuration
      ).runsGet(options)
      return (
        fetch: FetchAPI = portableFetch,
        basePath: string = BASE_PATH
      ) => {
        return fetch(
          basePath + localVarFetchArgs.url,
          localVarFetchArgs.options
        ).then((response) => {
          if (response.status >= 200 && response.status < 300) {
            return response.json()
          } else {
            throw response
          }
        })
      }
    },
    /**
     *
     * @param {string} run
     * @param {string} worker
     * @param {string} view
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    traceGet(
      run: string,
      worker: string,
      view: string,
      options?: any
    ): (fetch?: FetchAPI, basePath?: string) => Promise<any> {
      const localVarFetchArgs = DefaultApiFetchParamCreator(
        configuration
      ).traceGet(run, worker, view, options)
      return (
        fetch: FetchAPI = portableFetch,
        basePath: string = BASE_PATH
      ) => {
        return fetch(
          basePath + localVarFetchArgs.url,
          localVarFetchArgs.options
        ).then((response) => {
          if (response.status >= 200 && response.status < 300) {
            return response.json()
          } else {
            throw response
          }
        })
      }
    },
    /**
     *
     * @param {string} run
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    viewsGet(
      run: string,
      options?: any
    ): (fetch?: FetchAPI, basePath?: string) => Promise<Array<string>> {
      const localVarFetchArgs = DefaultApiFetchParamCreator(
        configuration
      ).viewsGet(run, options)
      return (
        fetch: FetchAPI = portableFetch,
        basePath: string = BASE_PATH
      ) => {
        return fetch(
          basePath + localVarFetchArgs.url,
          localVarFetchArgs.options
        ).then((response) => {
          if (response.status >= 200 && response.status < 300) {
            return response.json()
          } else {
            throw response
          }
        })
      }
    },
    /**
     *
     * @param {string} run
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    workersGet(
      run: string,
      options?: any
    ): (fetch?: FetchAPI, basePath?: string) => Promise<Array<string>> {
      const localVarFetchArgs = DefaultApiFetchParamCreator(
        configuration
      ).workersGet(run, options)
      return (
        fetch: FetchAPI = portableFetch,
        basePath: string = BASE_PATH
      ) => {
        return fetch(
          basePath + localVarFetchArgs.url,
          localVarFetchArgs.options
        ).then((response) => {
          if (response.status >= 200 && response.status < 300) {
            return response.json()
          } else {
            throw response
          }
        })
      }
    }
  }
}

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (
  configuration?: Configuration,
  fetch?: FetchAPI,
  basePath?: string
) {
  return {
    /**
     *
     * @param {string} run
     * @param {string} worker
     * @param {string} view
     * @param {string} groupBy Group By
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    kernelGet(
      run: string,
      worker: string,
      view: string,
      groupBy: string,
      options?: any
    ) {
      return DefaultApiFp(configuration).kernelGet(
        run,
        worker,
        view,
        groupBy,
        options
      )(fetch, basePath)
    },
    /**
     *
     * @param {string} run
     * @param {string} worker
     * @param {string} view
     * @param {string} [groupBy] Group By
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    kernelTableGet(
      run: string,
      worker: string,
      view: string,
      groupBy?: string,
      options?: any
    ) {
      return DefaultApiFp(configuration).kernelTableGet(
        run,
        worker,
        view,
        groupBy,
        options
      )(fetch, basePath)
    },
    /**
     *
     * @param {string} run
     * @param {string} worker
     * @param {string} view
     * @param {string} groupBy Group By
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    operationGet(
      run: string,
      worker: string,
      view: string,
      groupBy: string,
      options?: any
    ) {
      return DefaultApiFp(configuration).operationGet(
        run,
        worker,
        view,
        groupBy,
        options
      )(fetch, basePath)
    },
    /**
     *
     * @param {string} run
     * @param {string} worker
     * @param {string} view
     * @param {string} groupBy Group By
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    operationTableGet(
      run: string,
      worker: string,
      view: string,
      groupBy: string,
      options?: any
    ) {
      return DefaultApiFp(configuration).operationTableGet(
        run,
        worker,
        view,
        groupBy,
        options
      )(fetch, basePath)
    },
    /**
     *
     * @param {string} run
     * @param {string} worker
     * @param {string} view
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    overviewGet(run: string, worker: string, view: string, options?: any) {
      return DefaultApiFp(configuration).overviewGet(
        run,
        worker,
        view,
        options
      )(fetch, basePath)
    },
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    runsGet(options?: any) {
      return DefaultApiFp(configuration).runsGet(options)(fetch, basePath)
    },
    /**
     *
     * @param {string} run
     * @param {string} worker
     * @param {string} view
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    traceGet(run: string, worker: string, view: string, options?: any) {
      return DefaultApiFp(configuration).traceGet(
        run,
        worker,
        view,
        options
      )(fetch, basePath)
    },
    /**
     *
     * @param {string} run
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    viewsGet(run: string, options?: any) {
      return DefaultApiFp(configuration).viewsGet(run, options)(fetch, basePath)
    },
    /**
     *
     * @param {string} run
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    workersGet(run: string, options?: any) {
      return DefaultApiFp(configuration).workersGet(run, options)(
        fetch,
        basePath
      )
    }
  }
}

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
  /**
   *
   * @param {string} run
   * @param {string} worker
   * @param {string} view
   * @param {string} groupBy Group By
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public kernelGet(
    run: string,
    worker: string,
    view: string,
    groupBy: string,
    options?: any
  ) {
    return DefaultApiFp(this.configuration).kernelGet(
      run,
      worker,
      view,
      groupBy,
      options
    )(this.fetch, this.basePath)
  }

  /**
   *
   * @param {string} run
   * @param {string} worker
   * @param {string} view
   * @param {string} [groupBy] Group By
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public kernelTableGet(
    run: string,
    worker: string,
    view: string,
    groupBy?: string,
    options?: any
  ) {
    return DefaultApiFp(this.configuration).kernelTableGet(
      run,
      worker,
      view,
      groupBy,
      options
    )(this.fetch, this.basePath)
  }

  /**
   *
   * @param {string} run
   * @param {string} worker
   * @param {string} view
   * @param {string} groupBy Group By
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public operationGet(
    run: string,
    worker: string,
    view: string,
    groupBy: string,
    options?: any
  ) {
    return DefaultApiFp(this.configuration).operationGet(
      run,
      worker,
      view,
      groupBy,
      options
    )(this.fetch, this.basePath)
  }

  /**
   *
   * @param {string} run
   * @param {string} worker
   * @param {string} view
   * @param {string} groupBy Group By
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public operationTableGet(
    run: string,
    worker: string,
    view: string,
    groupBy: string,
    options?: any
  ) {
    return DefaultApiFp(this.configuration).operationTableGet(
      run,
      worker,
      view,
      groupBy,
      options
    )(this.fetch, this.basePath)
  }

  /**
   *
   * @param {string} run
   * @param {string} worker
   * @param {string} view
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public overviewGet(run: string, worker: string, view: string, options?: any) {
    return DefaultApiFp(this.configuration).overviewGet(
      run,
      worker,
      view,
      options
    )(this.fetch, this.basePath)
  }

  /**
   *
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public runsGet(options?: any) {
    return DefaultApiFp(this.configuration).runsGet(options)(
      this.fetch,
      this.basePath
    )
  }

  /**
   *
   * @param {string} run
   * @param {string} worker
   * @param {string} view
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public traceGet(run: string, worker: string, view: string, options?: any) {
    return DefaultApiFp(this.configuration).traceGet(
      run,
      worker,
      view,
      options
    )(this.fetch, this.basePath)
  }

  /**
   *
   * @param {string} run
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public viewsGet(run: string, options?: any) {
    return DefaultApiFp(this.configuration).viewsGet(run, options)(
      this.fetch,
      this.basePath
    )
  }

  /**
   *
   * @param {string} run
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public workersGet(run: string, options?: any) {
    return DefaultApiFp(this.configuration).workersGet(run, options)(
      this.fetch,
      this.basePath
    )
  }
}
